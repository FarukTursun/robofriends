{"version":3,"sources":["serviceWorker.js","components/Card.js","components/cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","OnsearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCASC,EAfJ,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACC,yBAAKC,UAAU,2DACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCmBOK,EA1BA,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAIhB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAEC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCLRW,EATC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,yBAAKV,UAAU,eACd,2BAAOW,KAAK,SAASC,YAAY,gBAAgBZ,UAAU,uCAAuCa,SAAUH,MCOhGI,EAVF,SAACC,GACb,OACC,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAChEJ,EAAMK,WCqBMC,E,kDAvBf,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACVC,UAAS,GAHO,E,8DAOAC,EAAMC,GAEvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKxB,OAAIG,KAAKJ,MAAMC,SACP,2DAGDG,KAAKX,MAAMK,a,GAnBOQ,aCqDZC,E,kDA7Cd,aAAc,IAAD,8BACZ,gBAcDC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAdxC,EAAKZ,MAAM,CACVlB,OAAQ,GAER4B,YAAY,IALD,E,gEASO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAM5B,IAAD,OACDC,EAAed,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAArC,GAC7C,OAAOA,EAAOP,KAAK6C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAGlE,OAA8B,IAA3BhB,KAAKJ,MAAMlB,OAAOwC,OACb,UAIP,6BACC,wBAAI5C,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQoC,W,GAlCNZ,aCDlBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,OAECC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.94cc83e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\nconst Card=({ name, email, id }) =>{\n\treturn(\n\t\t<div className='tc dib br3 pa3 ma2 grow bw2 shadow-5 helvetica robotpic'>\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200*200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2> \n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\n\n\n\t);\n}\n\nexport default Card;\n\n/*Because 'props.name' and 'props.email' are javacript expression not html, so that we have to wrap them in { }*/","import React from 'react';\nimport Card from './Card';\nconst Cardlist=({robots})=> {\n\n\n\t\n\treturn (\n\t\t<div>\n\t\t\t{    \n\t\t\trobots.map((user,i)=>{\n\t\t\t\treturn( \n\n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\t\n\t    </div>\n\n\n\n\t\t);\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox=({searchChange})=>{\n\treturn(\n\t\t<div className='tc grow pa2'>\n\t\t\t<input type='search' placeholder='Search Robots' className='tc pa3 bn b--yellow bg-lightest-blue' onChange={searchChange}/>\n\t\t\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll=(props)=>{\n\treturn (\n\t\t<div style={{overflow: 'scroll', border:'Spx solid black', height:'800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\n\t);\n};\n\n\nexport default Scroll;","import React,{Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\thasError:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\n\t\tthis.setState({hasError:true})\n\t}\n\n\n\trender(){\n\t\tif (this.state.hasError){\n\t\t\treturn <h1>Sorry, something went wrong</h1>\n\t\t}\n\n\t\treturn this.props.children;\n\t}\n\n\n}\n export default ErrorBoundry;\n","import React, {Component} from 'react';\nimport Cardlist from '../components/cardlist.js';\n// import {robots} from './robots.js';/*'robots' must be destructured like this '{ robots }' or else it cant be imported into this file*/\nimport SearchBox from '../components/SearchBox.js'\nimport Scroll from '../components/Scroll.js'\nimport ErrorBoundry from '../components/ErrorBoundry.js'\n\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\trobots: [],\n\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=> response.json())\n\t\t.then(users=>this.setState({robots: users}));\n\t}\n\n\tOnsearchChange=(event)=>{\n\t\tthis.setState({searchfield:event.target.value})\n\t}\n\trender(){\n\t\tconst filteredRobots=this.state.robots.filter(robots=>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\n\t\tif(this.state.robots.length===0){\n\t\t\treturn 'Loading'\n\t\t} else {\n\n\t\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"tc\">RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.OnsearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<Cardlist robots={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\n\t\t}\n\t\t\n\t}\n\t\n}\n\nexport default App;","import React from 'react';  /*react is a 'view' library, its core of the package that does DOM manipulation*/\n\nimport ReactDOM from 'react-dom'; /*'ReactDom'is a library that is exclusively used for websites, it changes according to what kind of screen we use'*/\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; /*An awesome pakage that has predefine classes that can perform  css effects*/\nimport App from './containers/App.js'\nReactDOM.render(\n  <React.StrictMode>\n\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}